package com.Jeka8833.LabsKPITwo.lab.rgr;

import com.Jeka8833.LabsKPITwo.Column;
import com.Jeka8833.LabsKPITwo.ForceStopException;
import com.Jeka8833.LabsKPITwo.Writer;
import com.Jeka8833.LabsKPITwo.lab.Lab;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.DecimalFormat;

public class Rgr1 implements Lab {
    @Override
    public String getName() {
        return "РГР 1";
    }

    @Override
    public void run() throws ForceStopException {
        Writer.add(new Column("Float", Float.class), new Column("Double", Double.class),
                new Column("Float-Error", String.class), new Column("Double-Error", String.class));
        final BigDecimal real = new BigDecimal("-153.94757997123152840489020889293599999663582173315912916112997883947292127420008217015920062328304204401264262412474805985535840435896408004894103597037773689413324115363022024001592403391437906840491636660979289095419057499183228913086541652570055478572680632231313410531226949509189268056154119355698689000736741611092527766776980832952896815973012165995858585167821915356792187819382790973609868897329024331114133724905509187576095823194715161658716335598090104020283321485909723445144483865554498380863083244864034812967193839450934643097790387603903512661528506437608212657464960725892889726232780549100942673249142961287289639509300069686489913338033316781116927200088683047183771135964900492073474857865198448219129996887559309239489338986772496666075755878474900096939252975824926757587435121950877708374789602027421428095188485872285609089492775644228580161593958427384443753307062955825168388097922146622894659208016968661147536623875574038914418894191746010127367140370239278018002523881219181307755511310584139317123620207012938498790374238363357495689899623848141091537410952603835353135991950495596334914325475285996118040192879118613347240919023956347649430753149953783664002918105624956648636747055983383961304044891304780935278656476430562980844334398696001409364597139140738333390372577250874197643967129507501655080042206940300152429007597683534504649326967993194676214610565034272891546813242847109710798757167471936415900507717837986899529324746852167628527253996203932228874366413830180414148305708347022942567283142604389626898001321879141321473067922661936880787628297404543869641832703857094734320641620035697701449593036149932758931124275839345007565151298547303675688468982207575324999293909859588364160102225210743282744845295578403977343961871122944405818432250403500453973666661463755388260535970605654618358574346394318419846809475414375681369288110117821067754382908787629786399421876820136752414379041133401702667252175638250789740745994377797155559714387219054218568722759456493879932243480935585654571140762612125408612119529886191420767934907186032995850204784167374199573739782900340379269332949405645860333155266645030868976606478221214500596694137040627647915356011680212494089093052405747888189672751450249998974028298183370014864688277094627641223507866176546791842535286128054497549258546964165250100224332475813805218309000266951309349537533298972371536552946463366208185243647109768625593969049434409411684176554970347017244462570238155808126281203536867367985750225600654961424167432633207230849054823991703075572791378382125898140096085661022916592214252150702186077950298540446174844578726287065842023065232272806067030889128713991930465517855369019849415346557420609133526239304893450246294641421214319974331757084479029060043416644604814272174747552393699755980268077377023342873855416634517804488315734229942989296466298596942593893168104417099595590695142325811845175194679686677939106494621831856732482453515786582726538184311303497499874829163802390198039657103363772306141197299453304537664596679809277993006243040699282757457936642595256055533343004652205177118076694278700792072177205831320617812592042762850857742687513838700510981298263990996995304209571236507246346974281894798403948781364920516848024889462026217001628719282697480255213559016778343850831291880827981449545416321116262871553491721972623564968215224317892635556688117880807182016645125559011009576385735262667003343264405049258594261692557294755676917162506676104905977309512168400561284990547473154790816213161547381246228137422010058248251374401285344839858903867525451397236277538067152801794478092875924182876420171632171376499575034606116676644578659219841703819824147524370293103495489200071277048853013559702219252288835631579950684402488157899199439796021433586376958033165538074577681981106907487145770688724694215068201919636595483012844578923489399377938577053637746372712939799091610319743130793207393926983446014018991618313967647400346426185248060674625649267159230530178173312372329588628016");
        final double value2 = Math.pow(3, 5) * Math.cos(Math.pow(5, 5));
        final float value1 = (float) (value2);

        final BigDecimal error1 = new BigDecimal(value1).subtract(real).multiply(new BigDecimal(100)).divide(real, RoundingMode.HALF_UP);
        final BigDecimal error2 = new BigDecimal(value2).subtract(real).multiply(new BigDecimal(100)).divide(real, RoundingMode.HALF_UP);

        Writer.add(value1, value2, new DecimalFormat("0.#############E0").format(error1), new DecimalFormat("0.#############E0").format(error2));
        Writer.saveResult();
        throw new ForceStopException();
    }
}
